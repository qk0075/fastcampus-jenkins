* https://gwc-experiment.appspot.com/ 에 방문하여 Groovy 문법 실습

* 확인할 Groovy 코드

a = 3
b = 4

// " 를 사용한 스트링. ${} 로 감싼 변수가 스트링 내부에서 평가됨
println("a=${a}")

// ${} 내부에서 사용할 변수가 명확한 경우 그냥 $만 사용해도 됨.
println("a=$a")

// ' 를 사용한 스트링. 변수가 스트링 내부에서 평가되지 않음
println('b=${b}')

// """ 를 사용한 멀티라인 스트링. 변수가 스트링 내부에서 평가됨
println("""
	a=${a}
	b=${b}
""")

// ''' 를 사용한 멀티라인 스트링. 변수가 스트링 내부에서 평가 되지 않음
println('''
    a=${a}
    b=${b}
''')

// ${ } 내부에는 어떤 평가식도 사용 가능
println("""a + b + " WOW"= ${(a + b) + " WOW"}""")

// 기존 변수를 다른 타입으로 할당 가능
a = "hello"
b = "hell"

// 자바와는 달리 스트링이 같은지 비교를 == 를 사용하여 처리 가능
if (a == (b + "o")) {
    println("두 스트링이 같습니다.")
}

a = 3
b = 4

// 메소드는 def 함수명(파라미터) { ... } 로 정의
def plus(a, b) {
    return a + b
}
// 메소드 실행후 결과를 볼 수 있음, 심지어는 ${} 내부에서도 사용 가능
println("plus(a, b) = " + plus(a, b) + " WOW")
println("""plus(a, b) = ${plus(a, b) + " WOW "} """)

// 디폴트 파라미터 지정 가능
def minus(a, b = 0) {
    return a - b
}
println("minus(a, b) = ${minus(a)}" )

// return 을 쓰지 않으면 마지막 평가결과가 리턴
def multiply(a, b) {
    a * b
}

def multiply(param) {
    param.a * param.b
}

c = 4
d = 5
// 한 라인에 기록되어 있고, 호출 혼란 여지가 없다면 ( ) 생략 가능
e = multiply c, d
println(e)
e = multiply a=c, b=d
println(e)

// multiple 을 map 으로 호출
e = multiply a:c, b:d
println(e)


// groovy 에서 리스트 정의
list = [1, 2, 3, 4]

// 리스트 출력
println(list)
println(list[0])

// 리스트를 다른 형태로 변환
println(list.collect { it + 3 } )


// groovy 에서 map 정의
map = ["hello":"world", "my name is": "juno"]

// 맵 출력
println(map)
println(map["hello"])

// 맵을 다른 형태로 변환
println(map.collectEntries { k, v ->
    [k.toUpperCase(), v.toUpperCase()]
})

// Java 클래스 사용
import java.util.Date

// 자바와 동일하게 메소드 호출 가능
println(new Date().getHours())

// get~~ 메소드인 경우에는 프로퍼티 처럼 호출 가능
println(new Date().hours)




// Jenkins instance 접근. Sandbox 에서 사용 불가
instance = Jenkins.instance
println(instance.pluginManager.plugins)

println("")

instance.items.each {
  println(it.name)
}







